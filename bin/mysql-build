#!/usr/bin/env bash

set -E
exec 3<&2 # preserve original stderr at fd 3


lib() {
  parse_options() {
    OPTIONS=()
    ARGUMENTS=()
    local arg option index

    for arg in "$@"; do
      if [ "${arg:0:1}" = "-" ]; then
        if [ "${arg:1:1}" = "-" ]; then
          OPTIONS[${#OPTIONS[*]}]="${arg:2}"
        else
          index=1
          while option="${arg:$index:1}"; do
            [ -n "$option" ] || break
            OPTIONS[${#OPTIONS[*]}]="$option"
            index=$(($index+1))
          done
        fi
      else
        ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
      fi
    done
  }

  if [ "$1" == "--$FUNCNAME" ]; then
    declare -f "$FUNCNAME"
    echo "$FUNCNAME \"\$1\";"
    exit
  fi
}
lib "$1"


resolve_link() {
  $(type -p greadlink readlink | head -1) $1
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

build_failed() {
  { echo
    echo "BUILD FAILED"
    echo

    if file_is_not_empty "$LOG_PATH"; then
      echo "Results logged to ${LOG_PATH}"
      echo
      echo "Last 10 log lines:"
      tail -n 10 "$LOG_PATH"
    fi
  } >&3
  exit 1
}

file_is_not_empty() {
  local filename="$1"
  local line_count="$(wc -l "$filename" 2>/dev/null || true)"

  if [ -n "$line_count" ]; then
    words=( $line_count )
    [ "${words[0]}" -gt 0 ]
  else
    return 1
  fi
}

install_package() {
  install_package_using "tarball" 1 $*
}

install_package_using() {
  local package_type="$1"
  local package_type_nargs="$2"
  local package_name="$3"
  shift 3

  pushd "$DIST_PATH" >&4
  "fetch_${package_type}" "$package_name" $*
  popd >&4
  shift $(($package_type_nargs))

  pushd "$BUILD_PATH" >&4
  make_package "$package_name" $*
  popd >&4

  echo "Installed ${package_name} to ${PREFIX_PATH}" >&2
}

make_package() {
  local package_name="$1"
  shift

  pushd "$package_name" >&4
  before_build_package "$package_name"
  build_package "$package_name" $*
  after_build_package "$package_name"
  popd >&4
}

http() {
  local method="$1"
  local url="$2"
  local file="$3"
  [ -n "$url" ] || return 1

  if type curl &>/dev/null; then
    "http_${method}_curl" "$url" "$file"
  elif type wget &>/dev/null; then
    "http_${method}_wget" "$url" "$file"
  else
    echo "error: please install \`curl\` or \`wget\` and try again" >&2
    exit 1
  fi
}

http_head_curl() {
  curl -qsILf "$1" >&4 2>&1
}

http_get_curl() {
  curl -C - -o "${2:--}" -qsSLf "$1"
}

http_head_wget() {
  wget -q --spider "$1" >&4 2>&1
}

http_get_wget() {
  wget -nv -c -O "${2:--}" "$1"
}

fetch_tarball() {
  local package_name="$1"
  local package_url="$2"

  local package_filename="${package_name}.tar.gz"
  if [ -f "$package_filename" ]; then
    echo "Use the previously fetched ${package_filename}" >&2
  else
    echo "Downloading ${package_url}..." >&2
    if ! http get "$package_url" "$package_filename" >&2; then
      retry_fetch_tarball "$package_filename" "$package_url"
    fi
  fi

  if [ -d "$BUILD_PATH/$package_name" ]; then
    echo "Cleanup the previously builded directory" 2>&1
    rm -r "$BUILD_PATH/$package_name"
  fi

  echo "Unpacking tarball..." >&2
  tar xzvf "$package_filename" -C "$BUILD_PATH" >&4 2>&1
}

retry_fetch_tarball() {
  local package_filename="$1"
  local package_url="$2"

  if echo -n $package_url | grep -q $MYSQL_BUILD_MIRROR_URL; then
    package_url=$(echo -n $package_url | perl -pe "s{$MYSQL_BUILD_MIRROR_URL}{$MYSQL_BUILD_ARCHIVE_URL}")
    echo "Retry Downloading ${package_url}..." >&2
    http get "$package_url" "$package_filename" >&2
  else
    echo "tarball not found" 2>&1
    exit 1
  fi
}

build_package() {
  local package_name="$1"
  shift

  if [ "$#" -eq 0 ]; then
    local commands="standard"
  else
    local commands="$*"
  fi

  echo "Installing ${package_name}..." >&2

  for command in $commands; do
    "build_package_${command}" "$package_name"
  done
}

build_package_standard() {
  local package_name="$1"

  { ./configure --prefix="$PREFIX_PATH" $CONFIGURE_OPTIONS
    make $MAKE_OPTS
    $MAKE_INSTALL 
  } >&4 2>&1
}

build_package_cmake() {
  local package_name="$1"

  { cmake . -DCMAKE_INSTALL_PREFIX="$PREFIX_PATH" $CMAKE_OPTIONS
    make $MAKE_OPTS
    $MAKE_INSTALL 
  } >&4 2>&1
}

build_package_cmake575() {
  local package_name="$1"

  { CMAKE_OPTIONS="$CMAKE_OPTIONS -DDOWNLOAD_BOOST=1 -DWITH_BOOST=$BUILD_PATH/my_boost"
    cmake . -DCMAKE_INSTALL_PREFIX="$PREFIX_PATH" $CMAKE_OPTIONS
    make $MAKE_OPTS
    $MAKE_INSTALL 
  } >&4 2>&1
}

build_package_cmake_local_boost() {
  local package_name="$1"

  { mkdir working_dir
    pushd working_dir
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DWITH_BOOST=$BUILD_PATH/$package_name/boost"
    cmake ../ -DCMAKE_INSTALL_PREFIX="$PREFIX_PATH" $CMAKE_OPTIONS
    make $MAKE_OPTS
    $MAKE_INSTALL 
    popd
  } >&4 2>&1
}


declare -a before_hooks after_hooks

before_build() {
  local hook="$1"
  before_hooks["${#before_hooks[@]}"]="$hook"
}

after_build() {
  local hook="$1"
  after_hooks["${#after_hooks[@]}"]="$hook"
}

before_build_package() {
  for hook in "${before_hooks[@]}"; do eval "$hook"; done
}

after_build_package() {
  for hook in "${after_hooks[@]}"; do eval "$hook"; done
}

function configure_option {
  if [ "$1" = "-D" ]; then
    local filtered=

    for option in $CONFIGURE_OPTIONS; do
      case "$option" in
        "$2"*) ;;
        *) filtered="$filtered $option";;
      esac
    done

    filtered=$(echo "$filtered" | sed -e 's/[ ]*//')

    CONFIGURE_OPTIONS="$filtered"
    return 0
  else
    if [ "$1" = "-R" ]; then
      configure_option -D "$2"
      configure_option "$2" "$3"
      return 0
    fi
  fi

  CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $1"

  if [ -n "$2" ]; then
    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS=$2"
  fi
}

usage() {
  { echo "mysql-build, Compile and Install MySQL"
    echo "usage: mysql-build [-v|--verbose] [--with-debug] [--sudo] definition prefix [plugin[,...]]"
    echo "       mysql-build --definitions"
    echo "       mysql-build --plugins"
  } >&2

  if [ -z "$1" ]; then
    exit 1
  fi
}

list_definitions() {
  { for definition in "${MYSQL_BUILD_ROOT}/share/mysql-build/definitions/"*; do
      echo "${definition##*/}"
    done
  } | sort
}

list_plugins() {
  { for plugin in "${MYSQL_BUILD_ROOT}/share/mysql-build/plugins/"*; do
      echo "${plugin##*/}"
    done
  } | sort
}

enable_plugins() {
  local IFS=","
  local plugins="$1"
  local plugin_path builtin_plugin_path

  for plugin_path in $plugins; do
    if [ ! -e "$plugin_path" ]; then
      builtin_plugin_path="${MYSQL_BUILD_ROOT}/share/mysql-build/plugins/${plugin_path}"
      if [ -e "$builtin_plugin_path" ]; then
        plugin_path="$builtin_plugin_path"
      else
        echo "mysql-build: plugin not found: ${plugin_path}" >&2
        exit 2
      fi
    fi
    source "$plugin_path"
  done
}

unset VERBOSE
MAKE_INSTALL="make install"
MYSQL_BUILD_ROOT="$(abs_dirname "$0")/.."
CONFIGURE_OPTIONS=${MYSQL_BUILD_CONFIGURE_OPTS:-$(cat "$MYSQL_BUILD_ROOT/share/mysql-build/default_configure_options")}
CMAKE_OPTIONS=${MYSQL_BUILD_CMAKE_OPTS:-$(cat "$MYSQL_BUILD_ROOT/share/mysql-build/default_cmake_options")}

MYSQL_BUILD_MIRROR_URL=${MYSQL_BUILD_MIRROR_URL:-"http://cdn.mysql.com/Downloads/MySQL"}
MYSQL_BUILD_ARCHIVE_URL=${MYSQL_BUILD_ARCHIVE_URL:-"http://cdn.mysql.com/archives/mysql"}

parse_options "$@"

for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage without_exiting
    { echo
      echo "  -v/--verbose     Verbose mode: print compilation status to stdout"
      echo "  --with-debug     Debug build"
      echo "  --definitions    List all built-in definitions"
      echo "  --plugins        List all built-in plugins"
      echo "  --sudo           Run install as superuser"
      echo
    } >&2
    exit 0
    ;;
  "definitions" )
    list_definitions
    exit 0
    ;;
  "plugins" )
    list_plugins
    exit 0
    ;;
  "v" | "verbose" )
    VERBOSE=true
    ;;
  "with-debug" )
    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --with-debug"
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DWITH_DEBUG=1"
    ;;
  "sudo" )
    MAKE_INSTALL="sudo $MAKE_INSTALL"
    ;;
  esac
done

DEFINITION_PATH="${ARGUMENTS[0]}"
if [ -z "$DEFINITION_PATH" ]; then
  usage
elif [ ! -e "$DEFINITION_PATH" ]; then
  BUILTIN_DEFINITION_PATH="${MYSQL_BUILD_ROOT}/share/mysql-build/definitions/${DEFINITION_PATH}"
  if [ -e "$BUILTIN_DEFINITION_PATH" ]; then
    DEFINITION_PATH="$BUILTIN_DEFINITION_PATH"
  else
    echo "mysql-build: definition not found: ${DEFINITION_PATH}" >&2
    exit 2
  fi
fi

PREFIX_PATH="${ARGUMENTS[1]}"
if [ -z "$PREFIX_PATH" ]; then
  usage
fi

if [ -z "$TMPDIR" ]; then
  TMP="/tmp"
else
  TMP="${TMPDIR%/}"
fi

LOG_PATH="$MYSQL_BUILD_ROOT/build.log"
DIST_PATH="$MYSQL_BUILD_ROOT/dists"
BUILD_PATH="$MYSQL_BUILD_ROOT/build"

if [ -e "$LOG_PATH" ]; then
  unlink "$LOG_PATH"
fi

exec 4<> "$LOG_PATH" # open the log file at fd 4
if [ -n "$VERBOSE" ]; then
  tail -f "$LOG_PATH" &
  trap "kill $!" SIGINT SIGTERM EXIT
fi

if [ "${MAKEOPTS+defined}" ]; then
  MAKE_OPTS="$MAKEOPTS"
elif [ -z "${MAKE_OPTS+defined}" ]; then
  MAKE_OPTS="-j 2"
fi

export LANG=C

trap build_failed ERR
enable_plugins "${ARGUMENTS[2]}"
source "$DEFINITION_PATH"
trap - ERR
